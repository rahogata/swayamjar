/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package in.co.rahogata.swayamjar

import org.gradle.api.Project

import static java.nio.charset.StandardCharsets.US_ASCII

import java.nio.charset.StandardCharsets

import org.gradle.api.Plugin

/**
 * A plugin to create an executable JAR which can be run without <code>java -jar</code>.
 */
public class SwayamjarPlugin implements Plugin<Project> {

	private static final String WINDOWS = "windows";
	private static final String NIX = "nix";
	
	void apply(Project project) {
		def extension = project.extensions.create("swayamJar", SwayamjarPluginExtension);
		project.task("swayamJar") {
			doLast {
				// input validations
				if(!extension.source?.exists()) {
					throw new IllegalArgumentException("Source file is null or does not exists.");
				}
				def destName = extension.destination?.name.take(extension.destination?.name.lastIndexOf('.')) ?: extension.source.name.take(extension.source.name.lastIndexOf('.'));
				def destinationDir = extension.destination?.parent ?: extension.source.parent;
				def osPlatforms = extension.osPlatforms ? extension.osPlatforms.collect { e -> e.toLowerCase()} : [
					System.properties['os.name'].toLowerCase().contains(WINDOWS) ? WINDOWS : NIX
				];
				def destination;
				if(NIX in osPlatforms) {
					destination = new File(destinationDir, destName);
					destination.write "#!/usr/bin/env sh\n\n", US_ASCII.name();
					destination.append 'exec java ${' + extension.flagEnv + '} -jar "$0" "$@" \n\n', US_ASCII.name();
					extension.source.withInputStream { s ->
							destination.append s
					}
				}
				if (WINDOWS in osPlatforms) {
					destination = new File(destinationDir, destName + ".bat");
					destination.write "@echo off\r\n\r\n", US_ASCII.name();
					destination.append "java %${extension.flagEnv}% -jar %0 %*\r\n", US_ASCII.name();
					destination.append "exit /b %ERRORLEVEL%\r\n\r\n", US_ASCII.name();
					extension.source.withInputStream { s ->
						destination.append s
					}
				}
			}
		}
	}
}
